#+author: Oliver J. Mead
#+title: Literate Emacs Configuration

* Table of Contents                                                   :TOC_3:
- [[#pre-packages][Pre-packages]]
  - [[#faster-startup-à-la-doom][Faster Startup à la Doom:]]
  - [[#the-holy-scratch-buffer][The Holy Scratch buffer]]
  - [[#built-in-application-configuration][Built in Application Configuration]]
    - [[#eww][EWW]]
    - [[#gnus][GNUS]]
  - [[#declutter-the-view][Declutter the View]]
  - [[#sensible-anti-heretical-settings]['Sensible' Anti-heretical Settings]]
  - [[#appearance][Appearance]]
    - [[#fonts][Fonts]]
    - [[#clock][Clock]]
    - [[#line-numbers][Line Numbers]]
  - [[#enable-flyspell][Enable Flyspell]]
  - [[#recent-files][Recent Files]]
  - [[#non-package-no-leader-keys][Non-package (no leader) Keys]]
- [[#package-management][Package Management]]
  - [[#packaged-with-gnu-emacs][Packaged with GNU Emacs]]
  - [[#package-locations][Package Locations]]
  - [[#install-use-package][Install use-package]]
  - [[#packages][Packages]]
    - [[#web-development][Web Development]]
    - [[#exec-path-from-shell][exec-path-from-shell]]
    - [[#yasnippet][Yasnippet]]
    - [[#company][Company]]
    - [[#vterm][Vterm]]
    - [[#icons-and-emoji][Icons and Emoji]]
    - [[#undo-tree][Undo Tree]]
    - [[#evil-mode][EVIL Mode]]
    - [[#misc-unconfigured][Misc Unconfigured]]
    - [[#projectile][Projectile]]
    - [[#which-key][Which-key]]
    - [[#hydra][Hydra]]
    - [[#generalel][General.el]]
    - [[#treemacs][Treemacs]]
    - [[#counselivy][Counsel/Ivy]]
    - [[#pass][Pass]]
    - [[#circe][Circe]]
    - [[#parentheses-and-such][Parentheses and such]]
    - [[#language-specific][Language-Specific]]
    - [[#it-came-from-doom][It came from DOOM...]]
    - [[#org][Org]]
- [[#org-settings][Org Settings]]
  - [[#org-capture-templates][Org Capture Templates]]
  - [[#org-indent][Org Indent]]
- [[#customize-settings][Custom(ize) Settings]]
- [[#undo-early-init-gc][Undo early-init GC]]

* Pre-packages
:PROPERTIES:
:header-args:emacs-lisp: :lexical t :results none 
:END:
** Faster Startup à la Doom:
#+begin_src emacs-lisp
  ; -*- lexical-binding: t -*-
  (defvar last-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

** The Holy Scratch buffer
Start everything in the scratch buffer:
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq tab-bar-new-tab-choice "*scratch*")
#+end_src

And preserve the scratch buffer forever:
#+begin_src emacs-lisp
(with-current-buffer "*scratch*"
  (emacs-lock-mode 'kill))
#+end_src

** Built in Application Configuration
*** EWW
EWW as default browser:
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

*** GNUS
Tell Emacs who I am.
#+begin_src emacs-lisp
(setq user-mail-address "olivermead@olivermead.xyz"
      user-full-name "Oliver J. Mead")
#+end_src

Configure GNUS methods to receive mail:
#+begin_src emacs-lisp
  (setq gnus-select-method
          '(nnimap "olivermead.xyz"
                  (nnimap-address "mail.olivermead.xyz")
                  (nnimap-server-port "imaps")
                  (nnimap-stream ssl)
                  (nnmail-expiry-target "nnimap+olivermead.xyz:Trash")
                  (nnmail-expiry-wait immediate)))
#+end_src

Configure SMTP to send mail:
#+begin_src emacs-lisp
  (setq message-send-mail-function 'smtpmail-send-it
        send-mail-function 'smtpmail-send-it ;; also configure for MailMode
        smtpmail-smtp-server "mail.olivermead.xyz"
        smtpmail-stream-type 'starttls
        smtpmail-smtp-service 587)
#+end_src

Allow marking mail for offline reading:
#+begin_src emacs-lisp
  (setq gnus-use-cache t)
#+end_src

Tell GNUS to send my sent mail to the server:
#+begin_src emacs-lisp
  (setq gnus-message-archive-group "nnimap:Sent")
#+end_src

**** *Deprecated* 
Live updating:
#+begin_src emacs-lisp :eval never
  (setq-default gnus-demon-timestep 20
                gnus-asynchronous t)
  (add-hook 'gnus-startup-hook
            (lambda ()
              (gnus-demon-add-handler 'gnus-demon-scan-mail t nil)))

  (add-hook 'gnus-after-getting-new-news-hook 'gnus-notifications)
#+end_src

** Declutter the View
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 1)
(menu-bar-mode -1)
(setq frame-resize-pixelwise t)
(setq tabbar-use-images nil)
#+end_src

** 'Sensible' Anti-heretical Settings
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default make-backup-files nil)
  (setq-default backup-directory-alist
        `(("." . ,(expand-file-name "backups/" user-emacs-directory))))
  (setq server-kill-new-buffers nil)
#+end_src

** Appearance
*** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Unifont" :height 100)
(add-to-list 'default-frame-alist '(font . "Unifont"))
#+end_src

*** Clock
#+begin_src emacs-lisp
 (display-time-mode) 
#+end_src

*** Line Numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(menu-bar--display-line-numbers-mode-relative)
#+end_src

#+begin_src emacs-lisp
(dolist
    (mode
     '(org-mode-hook
       epa-key-mode-hook
       epa-key-list-mode-hook
       epa-info-mode-hook
       term-mode-hook
       vterm-mode-hook
       circe-mode-hook
       eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Enable Flyspell
#+begin_src emacs-lisp
(dolist
    (mode
     '(org-mode-hook))
  (add-hook mode (lambda () (flyspell-mode))))
#+end_src

** Recent Files
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 40)
(setq recentf-max-saved-items 40)
#+end_src

** Non-package (no leader) Keys
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Package Management
:PROPERTIES:
:header-args:emacs-lisp: :lexical t :results none 
:END:
** Packaged with GNU Emacs
#+begin_src emacs-lisp
(require 'dired-x)
(require 'project)
(require 'package)
#+end_src

** Package Locations
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Install use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Packages
*** Web Development
#+begin_src emacs-lisp
 (use-package simple-httpd) 
#+end_src

*** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (daemonp)
      (exec-path-from-shell-initialize)))
#+end_src

*** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

*** Company
#+begin_src emacs-lisp
(use-package company
  :init
  (setq company-global-modes '(not circe-mode
                                   message-mode
                                   help-mode
                                   vterm-mode
                                   gud-mode))
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

*** Vterm
#+begin_src emacs-lisp
(use-package vterm)
(use-package multi-vterm
  :after vterm
  :config
  (require 'vterm-tmux))
#+end_src

*** Icons and Emoji
**** Emojify
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

**** All-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

*** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (setq undo-tree-history-directory-alist
          `(("." . ,(expand-file-name "undo-tree/" user-emacs-directory))))
    (global-undo-tree-mode))
#+end_src

*** EVIL Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-undo-system 'undo-tree
          evil-insert-state-message nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map
      (kbd "C-h") 'evil-delete-backward-char-and-join))

  (use-package evil-commentary
    :after evil
    :config (evil-commentary-mode))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode 1))
#+end_src

*** Misc Unconfigured
#+begin_src emacs-lisp
(use-package transmission)

(use-package helm)

(use-package debbugs)

(use-package magit)

(use-package org)
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode)
    (add-to-list 'projectile-globally-ignored-directories "~/")
    (setq projectile-enable-caching t))
#+end_src

*** Which-key
#+begin_src emacs-lisp
(use-package which-key
  :init (setq which-key-idle-delay 0.3)
  :config
  (which-key-mode t))
#+end_src

*** Hydra
#+begin_src emacs-lisp
(use-package hydra
  :config
  (defhydra hydra-text-scale (:timeout 4)
      "Scale text in current buffer"
      ("j" text-scale-increase "Increase")
      ("k" text-scale-decrease "Decrease")
      ("q" nil "Quit" :exit t))
  (defhydra hydra-window-size (:timeout 4)
    "Resize the current Emacs window"
    ("j" evil-window-increase-height "Incr Height")
    ("k" evil-window-decrease-height "Decr Height")
    ("l" evil-window-increase-width "Incr Width")
    ("h" evil-window-decrease-width "Decr Width")
    ("q" nil "Quit :exit t")))
#+end_src

*** General.el
#+begin_src emacs-lisp
  (use-package general
   :after (which-key evil hydra multi-vterm)
   :config
   (general-create-definer ojm/leader
     :keymaps '(normal insert visual emacs debbugs)
     :prefix "SPC"
     :global-prefix "C-SPC")

   (general-create-definer ojm/local-leader
     :prefix "SPC m")

   (general-create-definer ojm/local-leader-which-key
     :prefix "SPC")

   (defmacro ojm/prefix (&optional prompt &rest maps)
     `'(:ignore t :which-key ,(or prompt "prefix") :keymaps ,maps))
   (defmacro ojm/keycmd (cmd &optional name)
     `'(,cmd :which-key ,(or name (symbol-name cmd))))
   (defmacro ojm/simulate (key &optional name)
     `(general-key ,key))

   (defun ojm/scratch ()
     (interactive)
     (switch-to-buffer "*scratch*"))

   (defun ojm/transmission (socket)
     (interactive (list (if current-prefix-arg
                            (read-file-name
                             "Transmission Remote Socket: "))))
     (let ((transmission-host (or socket transmission-host)))
       (transmission)))

   (ojm/local-leader-which-key 'normal
     "m" (ojm/prefix "Org Command:" 'org-mode-map)
     "m" (ojm/prefix "ELisp Command:" 'lisp-interaction-mode-map)
     "m" (ojm/prefix "Circe Command:" 'circe-mode-map))

   (ojm/leader
     "s" (ojm/keycmd ojm/scratch)
     "u" (ojm/keycmd universal-argument "Universal Argument")
     "." (ojm/keycmd counsel-find-file "Find File")
     "," (ojm/keycmd counsel-switch-buffer "Switch Buffer")
     "w" (general-key "C-w")
     "W" (ojm/keycmd which-key-show-top-level "What Do?")
     "h" (general-key "C-h")
     "x" (general-key "C-x")
     "e" (ojm/keycmd eval-last-sexp "Eval Last")
     "SPC" (ojm/keycmd projectile-find-file)
     "P" (ojm/keycmd projectile-add-known-project)
     "p" '(:keymap projectile-command-map :package projectile
                   :which-key "Projectile Command:"))

   (ojm/leader
     "TAB" (ojm/prefix "Tabs:")
     "TAB t" (ojm/keycmd tab-bar-mode "Toggle Tab Bar")
     "TAB d" (ojm/keycmd tab-close "Close Tab")
     "TAB n" (ojm/keycmd tab-new "New Tab"))

   (ojm/leader
     "c" (ojm/prefix "Util:")
     "cw" (ojm/keycmd dictionary-search "Define Word"))

   (ojm/leader
     "j" (ojm/prefix "Jump:")
     "jo" (ojm/keycmd evil-previous-open-paren "Opening Paren")
     "jc" (ojm/keycmd evil-next-close-paren "Closing Paren")
     "jm" (ojm/keycmd evil-jump-item "Matching Delimiter"))

   (ojm/leader
     "t" (ojm/prefix "Toggle:")
     "tt" (ojm/keycmd counsel-load-theme "Choose Theme")
     "ts" (ojm/keycmd hydra-text-scale/body "Scale Adjustment")
     "tr" (ojm/keycmd hydra-window-size/body "Window Adjustment")
     "tw" (ojm/keycmd toggle-truncate-lines)
     "tp" (ojm/keycmd electric-pair-mode))

   (ojm/leader
     "g" (ojm/prefix "Git:")
     "gg" (ojm/keycmd magit "Launch Magit")
     "gb" (ojm/keycmd magit-branch-or-checkout)
     "gs" (ojm/keycmd magit-stage)
     "gF" (ojm/keycmd magit-pull)
     "gp" (ojm/keycmd magit-push)
     "gd" (ojm/keycmd magit-diff-unstaged)
     "gc" (ojm/keycmd magit-commit))

   (ojm/leader
     "f" (ojm/prefix "File Command:")
     "fd" (ojm/keycmd delete-file)
     "fr" (ojm/keycmd counsel-buffer-or-recentf)
     "fb" (ojm/prefix "Bookmark:")
     "fbm" (ojm/keycmd bookmark-set)
     "fbM" (ojm/keycmd bookmark-set-no-overwrite)
     "fbb" (ojm/keycmd bookmark-jump))

   (ojm/leader
     "b" (ojm/prefix "Buffer Command:")
     "bn" (ojm/keycmd switch-to-next-buffer "Next")
     "bp" (ojm/keycmd switch-to-prev-buffer "Prev")
     "bd" (ojm/keycmd kill-current-buffer)
     "bs" (ojm/keycmd save-buffer))

   (ojm/leader
     "q" (ojm/prefix "Quit:")
     "qq" (ojm/keycmd save-buffers-kill-terminal "Quit"))

   (ojm/leader
     "i" (ojm/prefix "Insert: ")
     "ie" (ojm/keycmd emojify-insert-emoji)
     "is" (ojm/keycmd yas-insert-snippet)
     "iu" (ojm/keycmd counsel-unicode-char))

   (ojm/local-leader 'normal 'circe-mode-map
     "q" (ojm/keycmd circe-command-QUERY)
     "j" (ojm/keycmd circe-command-JOIN)
     "p" (ojm/keycmd circe-command-PING)
     "a" (ojm/keycmd circe-command-GAWAY)
     "b" (ojm/keycmd circe-command-BACK)
     "u" (ojm/keycmd lui-track-jump-to-indicator)
     "m" (ojm/keycmd lui-track-move "Mark Read")
     "r" (ojm/keycmd circe-reconnect)
     "R" (ojm/keycmd circe-reconnect-all))

   (ojm/leader
     "o" (ojm/prefix "Open: ")
     "oc" (ojm/keycmd circe)
     "og" (ojm/keycmd gnus)
     "ot" (ojm/keycmd vterm-tmux "TMux")
     "oT" '((lambda nil
              (interactive)
              (let
                  ((current-prefix-arg
                    '(4)))
                (call-interactively 'vterm-tmux)))
            :which-key "TMux Remote"))) 
#+end_src

*** Treemacs
**** Treemacs Itself
#+begin_src emacs-lisp
 (use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src

**** Treemacs Extensions
#+begin_src emacs-lisp
(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once))

(use-package treemacs-magit
  :after (treemacs magit))

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

*** Counsel/Ivy
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-switch-buffer)
         ("C-x C-f" . counsel-find-file)
         ("C-s" . swiper)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)
  (ivy-mode 1)) ;; default starts with ^

(use-package counsel-projectile
  :config (counsel-projectile-mode))

(use-package ivy-rich
  :config
  (ivy-rich-mode 1))
#+end_src

*** Pass
#+begin_src emacs-lisp
  (use-package pass
   :init
   (autoload 'auth-source-pass-parse-entry "auth-source-pass")
   (defvar +pass-user-fields '("login" "user" "username" "email"))
   (defvar +pass-url-fields '("url" "site" "location"))
   :config
   (defalias '+pass-get-entry #'auth-source-pass-parse-entry)
   (defun +pass-get-field (entry fields &optional noerror)
     (if-let* ((data (if (listp entry) entry (+pass-get-entry entry))))
         (cl-loop for key in (ensure-list fields)
                  when (assoc key data)
                  return (cdr it))
      (unless noerror
           (error "Couldn't find entry: %s" entry))))

   (defun +pass-get-user (entry)
        (+pass-get-field entry +pass-user-fields))

   (defun +pass-get-secret (entry)
        (+pass-get-field entry 'secret)))

  (use-package password-store)
  (use-package password-store-otp)
  (use-package ivy-pass)
#+end_src

*** Circe
#+begin_src emacs-lisp
 (use-package circe
  :defer t
  :config
  (defun ojm/pretty-lui ()
    (setq fringed-outside-margins t
          right-margin-width 7 
          word-wrap t
          wrap-prefix "    "))

  (setq circe-network-options 
        `(("Libera Chat"
           :tls t
           :port 6697
           :nick "olivermead"
           :sasl-username ,(+pass-get-user "irc.libera.chat")
           :sasl-password (lambda (&rest _) (+pass-get-secret "irc.libera.chat"))
           :channels ("#emacs" "#stumpwm"))))
  (setq circe-use-cycle-completion t)
  (require' circe-color-nicks)
  (add-hook 'circe-channel-mode-hook #'enable-circe-color-nicks)
  (add-hook 'lui-mode-hook #'enable-lui-track-bar)
  (add-hook 'lui-mode-hook #'ojm/pretty-lui)
  (defvar +irc-left-padding 13)
  (defsubst +irc--pad (left right)
    (format (format "%%%ds | %%s" +irc-left-padding)
            (concat "*** " left) right))
  (setq circe-color-nicks-min-contrast-ratio 4.5
        circe-color-nicks-everywhere t
        circe-reduce-lurker-spam t

        lui-time-stamp-position 'right-margin
        lui-fill-type nil

        circe-format-say (format "{nick:+%ss} │ {body}" +irc-left-padding)
        circe-format-self-say circe-format-say
        circe-format-action (format "{nick:+%ss} * {body}" +irc-left-padding)
        circe-format-self-action circe-format-action
        circe-format-notice (format "{nick:%ss} _ {body}" +irc-left-padding)
        circe-format-server-topic
        (+irc--pad "Topic" "{userhost}: {topic-diff}")
        circe-format-server-join-in-channel
        (+irc--pad "Join" "{nick} ({userinfo}) joined {channel}")
        circe-format-server-join
        (+irc--pad "Join" "{nick} ({userinfo})")
        circe-format-server-part
        (+irc--pad "Part" "{nick} ({userhost}) left {channel}: {reason}")
        circe-format-server-quit
        (+irc--pad "Quit" "{nick} ({userhost}) left IRC: {reason}]")
        circe-format-server-quit-channel
        (+irc--pad "Quit" "{nick} ({userhost}) left {channel}: {reason}]")
        circe-format-server-rejoin
        (+irc--pad "Re-join" "{nick} ({userhost}), left {departuredelta} ago")
        circe-format-server-netmerge
        (+irc--pad "Netmerge" "{split}, split {ago} ago (Use /WL to see who's still missing)")
        circe-format-server-nick-change
        (+irc--pad "Nick" "{old-nick} ({userhost}) is now known as {new-nick}")
        circe-format-server-nick-change-self
        (+irc--pad "Nick" "You are now known as {new-nick} ({old-nick})")
        circe-format-server-nick-change-self
        (+irc--pad "Nick" "{old-nick} ({userhost}) is now known as {new-nick}")
        circe-format-server-mode-change
        (+irc--pad "Mode" "{change} on {target} by {setter} ({userhost})")
        circe-format-server-lurker-activity
        (+irc--pad "Lurk" "{nick} joined {joindelta} ago"))) 
#+end_src

*** Parentheses and such
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package parinfer-rust-mode
  :when (bound-and-true-p module-file-suffix)
  :hook emacs-lisp-mode)
#+end_src

*** Language-Specific
**** *TEMPORARY* Eglot
#+begin_src emacs-lisp
(use-package eglot)  
#+end_src

**** Haskell
#+begin_src emacs-lisp
 (use-package haskell-mode) 
#+end_src

**** Common Lisp
#+begin_src emacs-lisp
  (use-package sly)
#+end_src

**** Scheme
#+begin_src emacs-lisp
  (use-package geiser)
#+end_src

***** Specific Implementations
****** Guile
#+begin_src emacs-lisp
 (use-package geiser-guile) 
#+end_src

*** It came from DOOM...
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-height 25
          doom-modeline-gnus t
          doom-modeline-gnus-timer 1)
    :custom
    (delete '(circe-mode . special) doom-modeline-mode-alist)
    (doom-modeline-mode 1))

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-gruvbox-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** Org
#+begin_src emacs-lisp
 (use-package org :pin "elpa") 
#+end_src

**** Table of Contents in Org
#+begin_src emacs-lisp
  (use-package toc-org
    :hook ((org-mode . toc-org-mode)))
#+end_src

* Org Settings
:PROPERTIES:
:header-args:emacs-lisp: :lexical t :results none 
:END:
** Org Capture Templates
#+begin_src emacs-lisp
  (defun ojm/org-dir (file)
    (expand-file-name file org-directory))
  (defun ojm/project-local (file)
    (expand-file-name file (projectile-project-root)))
  (setq org-confirm-babel-evaluate nil)
  (setq +org-capture-journal-file "journal.org.gpg"
      +org-capture-todo-file "todo.org"
      +org-capture-notes-file "notes.org"
      org-capture-templates
      `(("t" "Personal todo" entry
          (file+headline ,(ojm/org-dir +org-capture-todo-file) "Inbox")
          "* TODO %?\n%i\n%a" :prepend t)
        ("n" "Personal notes" entry
         (file+headline ,(ojm/org-dir +org-capture-notes-file) "Inbox")
         "* %U %?\n%i\n%a" :prepend t)
        ("j" "Journal" entry
         (file+olp+datetree ,(ojm/org-dir +org-capture-journal-file))
         "* %U %?\n%i\n%a" :prepend t)
        ;; Project Local Capture
        ("p" "Templates for projects")
        ("pt" "Project todo" entry
         (file+headline ,(ojm/project-local +org-capture-todo-file) "Inbox")
         "* TODO %?\n%i\n%a" :prepend t)
        ("pn" "Project notes" entry
         (file+headline ,(ojm/project-local +org-capture-notes-file) "Inbox")
         "* %U %?\n%i\n%a")))
#+end_src
** Org Indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode) 
#+end_src

* Custom(ize) Settings
:PROPERTIES:
:header-args:emacs-lisp: :lexical t :results none 
:END:
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

* Undo early-init GC
:PROPERTIES:
:header-args:emacs-lisp: :lexical t :results none 
:END:
#+begin_src emacs-lisp
(setq gc-cons-threshold 1600000 ;; 160KB
      gc-cons-percentage 0.1
      file-name-handler-alist last-file-name-handler-alist) 
#+end_src
